const vec3 noiseVectors[64] = vec3[](
vec3(-0.682964, 0.778350, 0.542999),
vec3(-0.708018, -0.366419, 0.593008),
vec3(0.413995, 0.701051, 0.573785),
vec3(0.019927, 0.895561, 0.111871),
vec3(-0.619979, 0.604795, 0.920862),
vec3(0.509113, -0.111283, 0.493613),
vec3(0.756772, -0.523635, -0.223608),
vec3(-0.420285, -0.804175, 0.952251),
vec3(-0.735425, -0.204499, -0.201792),
vec3(-0.825349, 0.420710, -0.237907),
vec3(0.469124, 0.088359, -0.227493),
vec3(-0.285993, 0.057321, 0.516281),
vec3(-0.892817, -0.845720, -0.391775),
vec3(0.967891, -0.634729, 0.521707),
vec3(0.224459, -0.626506, 0.864145),
vec3(-0.495659, -0.394431, -0.084059),
vec3(0.949388, 0.136395, -0.438426),
vec3(0.159124, -0.166975, -0.483519),
vec3(0.629778, -0.904960, 0.344647),
vec3(-0.070793, 0.487320, 0.719561),
vec3(-0.772851, -0.178033, 0.508828),
vec3(-0.071365, -0.707269, -0.019255),
vec3(-0.771601, -0.642331, -0.283463),
vec3(0.982604, 0.022148, 0.342875),
vec3(0.482788, -0.282130, -0.110699),
vec3(-0.201271, -0.103539, -0.926973),
vec3(-0.595974, -0.542705, -0.669036),
vec3(0.794496, -0.479294, 0.206060),
vec3(0.203837, 0.512669, -0.749638),
vec3(0.109093, -0.571021, -0.795460),
vec3(-0.141817, 0.041201, -0.426505),
vec3(0.328846, -0.049785, 0.015148),
vec3(0.190334, -0.023223, -0.517668),
vec3(0.300549, 0.577648, -0.808747),
vec3(0.495327, -0.392870, -0.301152),
vec3(0.574698, -0.286134, 0.795659),
vec3(0.831999, -0.328244, -0.299034),
vec3(0.000584, 0.809287, 0.673695),
vec3(-0.200837, 0.404456, 0.014106),
vec3(-0.550366, -0.259364, -0.269339),
vec3(-0.105195, 0.575651, 0.932492),
vec3(-0.746786, 0.820868, 0.096740),
vec3(-0.587484, -0.609622, -0.743613),
vec3(0.783550, -0.834414, 0.399929),
vec3(-0.456982, -0.817008, 0.938401),
vec3(-0.926332, -0.563874, 0.124845),
vec3(-0.155333, 0.501327, -0.761461),
vec3(-0.159238, 0.198570, 0.212175),
vec3(-0.778284, 0.059120, -0.285766),
vec3(-0.550787, -0.975279, -0.415373),
vec3(0.517587, -0.914496, -0.077145),
vec3(0.574851, 0.207200, 0.047002),
vec3(-0.033576, -0.324151, 0.221746),
vec3(-0.858240, 0.158234, -0.618235),
vec3(0.298991, -0.860200, 0.848942),
vec3(-0.883445, -0.187100, 0.681244),
vec3(-0.293335, 0.154231, 0.564256),
vec3(-0.821321, -0.480535, 0.027126),
vec3(-0.431921, -0.304866, -0.145516),
vec3(-0.344856, -0.201791, -0.021198),
vec3(0.080231, 0.980156, 0.014249),
vec3(-0.930799, -0.782377, -0.828903),
vec3(0.376979, -0.585623, 0.687978),
vec3(0.240288, 0.660880, 0.254263));

vec2 texCoordFromPosition(vec3 position, mat4 viewMatrix, mat4 projectionMatrix) {
    vec4 projectedPosition = projectionMatrix * viewMatrix * vec4(position.xyz, 1.0);
    projectedPosition.xy /= projectedPosition.w;
    projectedPosition.xy = projectedPosition.xy * 0.5 + 0.5;
    return projectedPosition.xy;
}

float ambientOcclusion(sampler2D depthTexture, vec3 position, int samples, float radius,
                       mat4 viewMatrix, mat4 projectionMatrix) {
    float fragDepth = texture(depthTexture, texCoordFromPosition(position, viewMatrix, projectionMatrix)).r;

    float occlusion = 0.0;
    for(int i = 0; i < samples; i++) {
        vec3 samplePosition = position.xyz + radius * noiseVectors[i];

        vec2 texCoord = texCoordFromPosition(samplePosition, viewMatrix, projectionMatrix);
        float sampleDepth = texture(depthTexture, texCoord).r;
        if(abs(sampleDepth - fragDepth) < radius && sampleDepth < fragDepth) {
            occlusion += 1.0;
        }
    }

    return 1.0 - occlusion / samples;
}
